name: CICD Workflow 

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # DOCKER BUILD variables
  # Using docker.io repsitory
  REGISTRY: docker.io
  IMAGE_NAME: ${{ vars.DOCKER_USERNAME }}/user_api_app
  PLATFORM: linux/arm/v8



jobs:
  python_build_test:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test application
      run: |
        python ./app.py -l & pid=$!; sleep 10; nc -zv localhost 8080; kill -9 $pid 
    


  docker_build:
    # Build and push the image to remote repository
    needs: python_build_test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 #v3.1.1
        with:
          cosign-release: 'v2.1.1'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: type=raw,value=latest

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          platforms: ${{ env.PLATFORM }} 
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


  minikube_deploy:
    # Deploy locally to minikube (require the image to be re-build locally)
    runs-on: ubuntu-latest
    name: build app and deploy to minikube
    steps:
    - uses: actions/checkout@v2

    - name: Start minikube
      uses: medyagh/setup-minikube@master

    - name: Try the cluster !
      run: kubectl get pods -A

    - name: Build image
      run: |
        export SHELL=/bin/bash
        eval $(minikube -p minikube docker-env)
        docker build -f ./Dockerfile -t local/user_api_app .
        echo -n "verifying images:"
        docker images        
    
    - name: Deploy to minikube
      run:
        minikube kubectl -- apply -f deploy-app-local.yaml

    - name: Test service URLs
      run: |
        minikube service list
        minikube kubectl -- get po
        sleep 10
        minikube kubectl -- get po
        echo "------------------ opening the service ------------------"
        minikube kubectl -- port-forward services/user-api-app 8080:8080 &
        echo "------------------ testing the server ------------------"
        nc -zv localhost 8080  
        if [ $? = "0" ]; then echo -e "\n\n------------------ Deployment Succesfull ------------------\n\n";fi                
  